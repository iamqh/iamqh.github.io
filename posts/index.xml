<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on iamqh's Blog</title><link>/posts/</link><description>Recent content in Posts on iamqh's Blog</description><generator>Hugo -- gohugo.io</generator><language>vi-vn</language><lastBuildDate>Thu, 28 Apr 2022 17:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Crawl truyện và mang nó lên Kindle</title><link>/posts/crawl-truy-n-va-mang-no-len-kindle/</link><pubDate>Thu, 28 Apr 2022 17:00:00 +0000</pubDate><guid>/posts/crawl-truy-n-va-mang-no-len-kindle/</guid><description>Chuyện là đợt dính covid vừa rồi phải cách ly một mình một cõi, mình mới nhận ra là mình còn sở hữu một em kindle paper white đời thứ 3 vẫn còn ngon. Hồi đấy mua về để đọc truyện mà sau lại lười quá, vứt xó rồi quên luôn :sweat_smile:. Cách ly chán quá, nên mình có thời gian đọc cày xong Kimetsu no yaiba luôn. Rảnh thật đấy :relieved:.</description></item><item><title>Chuyện comment, mộng mơ và cái sự lười</title><link>/posts/comment-story/</link><pubDate>Tue, 03 Aug 2021 19:03:10 +0000</pubDate><guid>/posts/comment-story/</guid><description>Chuyện kể rằng có một cậu thanh niên đua đòi đi làm blog. Sau khi tạo ra blog và làm hẳn một bài viết để chém gió cách làm blog trong 10 phút, cậu ta lại muốn blog phải có chỗ để các bạn đọc có thể góp ý, bởi lẽ cậu này viết ẩu lắm, bài viết ra không sai chỗ này thì cũng sai chỗ kia.
Và thế là, cậu cũng sắm cho blog của mình một nút comment.</description></item><item><title>Câu chuyện debug</title><link>/posts/debug-story/</link><pubDate>Sat, 29 May 2021 07:53:49 +0000</pubDate><guid>/posts/debug-story/</guid><description>Hôm trước tester có report cho mình một lỗi đó là khi đã thanh toán thành công rồi mà trên app mobile lại hiện là hoá đơn không hợp lệ. Nghe có vẻ magic :slightly_smiling_face:. Nào, cùng bắt đầu hành trình tìm cái ngu của bản thân nào!
Hiểu vấn đề Bước đầu tiên là cần phải hiểu vấn đề đã. Nếu trên client báo lỗi như vậy thì có 2 khả năng</description></item><item><title>Hành trình tìm lại emoji của messenger</title><link>/posts/messenger-emoji/</link><pubDate>Fri, 14 May 2021 20:29:16 +0000</pubDate><guid>/posts/messenger-emoji/</guid><description>Hế lu mọi người, sau một năm sủi để tìm cách thoát ế, mình mới nhớ ra là mình vẫn còn 1 cái blog :grin:. Trở lại lần này, mình tự mày mò thêm 1 vài tính năng mới cho cái blog đã bị mạng nhện bám kín này như là đổi qua lại giữa Dark/light theme, hay là tự làm hệ thống comment riêng cho blog. Mấy cái này nếu có thời gian mình sẽ viết sau (hoặc là sủi tiếp :relieved:)</description></item><item><title>Mình đã tạo blog cá nhân trong 10 phút như thế nào?</title><link>/posts/toi-da-tao-blog-ca-nhan-trong-10-phut/</link><pubDate>Mon, 22 Jun 2020 18:39:34 +0000</pubDate><guid>/posts/toi-da-tao-blog-ca-nhan-trong-10-phut/</guid><description>Sau khi viết một số bài trên Viblo, mình đã nảy ra ý định (thực ra là từ năm nhất rồi nhưng mà lười) làm một blog cá nhân để tổng hợp lại kiến thức cũng như nâng cao khả năng chém gió. Và&amp;hellip; sau nửa buổi tối lục lọi trên Google và Github, cuối cùng mình cũng đã tìm được thứ mà mình cần: một static blog framework
Tại sao lại là static?</description></item><item><title>Ngăn ngừa Memory leaks bằng autoreleasepool trong unit test</title><link>/posts/autoreleasepool-unit-test/</link><pubDate>Tue, 16 Jun 2020 08:59:47 +0000</pubDate><guid>/posts/autoreleasepool-unit-test/</guid><description>Memory leaks thường xảy ra mà không có bất cứ thông báo nào. Mặc dù việc sử dụng weak reference cho self trong các closure đã giúp ích rất nhiều, nhưng như thế là chưa đủ. Chúng ta có thể sử dụng memory graph debugging hoặc Xcode Instruments để tìm và giải quyết các lỗi về bộ nhớ. Nhưng nó khá phức tạp và tốn nhiều thời gian.
Rất may là chúng ta có một cách đơn giản hơn, là bằng cách sử dụng unit test.</description></item><item><title>Hiểu về Copy-on-Write trong Swift</title><link>/posts/copy-on-write/</link><pubDate>Sun, 17 May 2020 08:59:47 +0000</pubDate><guid>/posts/copy-on-write/</guid><description>Trong Swift, ta có kiểu reference type (Class) và value type (Struct, Tuble, enum). Kiểu value type có bản chất là copy. Có nghĩa là nếu bạn gán một value type cho một biến hoặc pass nó như một parameter của function (không phải inout), dữ liệu của value type này sẽ được copy. Lúc này, bạn sẽ có 2 value type có nội dung giống nhau nhưng có 2 địa chỉ bộ nhớ riêng biệt.</description></item></channel></rss>